<?php

/**
 * @file
 * 
 * A library of common mechanisms for modules using MongoDB.
 */
require_once('includes/tow_mongodb.index.inc');

function tow_mongodb_init() {
    module_load_include('inc', 'tow', 'includes/tow.access');

    if ((arg(0) == 'search_dataset') && !arg(2)) {
        global $user;

        $node = node_load((int) arg(1));
        $type = $node->type;
        switch ($type) {
            case 'dataset':
                $dataset = $node;
                break;
            case 'table':
                $dataset = node_load($node->field_dataset[0]['value']);
                break;
            case 'record':
                $table = node_load($node->field_table[0]['value']);
                $dataset = node_load($table->field_dataset[0]['value']);
                break;
            case 'linked_record':
                $table = node_load($node->field_tables[0]['value']);
                $dataset = node_load($table->field_dataset[0]['value']);
                break;
            case 'saved_search':
                $dataset = node_load($node->field_dataset_nid[0]['value']);
                break;
            case 'document':
                $dataset = node_load($node->field_doc_dataset_nid[0]['value']);
                break;
        }

        if (tow_access_dataset_check($dataset)) {

            // Add css.
            drupal_add_css(drupal_get_path('module', 'tow_mongodb') . '/css/dc.css');
            drupal_add_css(drupal_get_path('module', 'tow_mongodb') . '/css/jquery.gridster.css');
            drupal_add_css(drupal_get_path('module', 'tow_mongodb') . '/css/style.gridster.css');
            drupal_add_css(drupal_get_path('module', 'tow_mongodb') . '/css/normalize.css');
            drupal_add_css(drupal_get_path('module', 'tow_mongodb') . '/css/style.css');

            // Add js.
            drupal_add_js(drupal_get_path('module', 'tow_mongodb') . '/js/d3.js', 'module', 'footer');
            drupal_add_js(drupal_get_path('module', 'tow_mongodb') . '/js/crossfilter.js', 'module', 'footer');
            drupal_add_js(drupal_get_path('module', 'tow_mongodb') . '/js/dc.js', 'module', 'footer');
            drupal_add_js(drupal_get_path('module', 'tow_mongodb') . '/js/jquery.gridster.js', 'module', 'footer');
            drupal_add_js(drupal_get_path('module', 'tow_mongodb') . '/js/handlebars.js', 'module', 'footer');
            drupal_add_js(drupal_get_path('module', 'tow_mongodb') . '/js/ember.js', 'module', 'footer');
            drupal_add_js(drupal_get_path('module', 'tow_mongodb') . '/js/ember-data.js', 'module', 'footer');

            drupal_add_js(drupal_get_path('module', 'tow_mongodb') . '/js/tow_mongodb.inner_search.js', 'module', 'footer');
            drupal_add_js(array(
                'tow_mongodb' => array(
                    'nodejs_port' => variable_get('tow_nodejs_port', 1331),
                    'dataset_nid' => $dataset->nid,
                    'user_id' => $user->uid,
                )
                    ), 'setting');
        }
    }
}

/**
 * Implementation of hook_help().
 */
function tow_mongodb_help($path, $arg) {
    switch ($path) {
        case 'admin/help#tow_mongodb':
            return '<p>' . t('<a href="!project">MongoDB</a> implements a generic <a href="!mongo">MongoDB</a> interface.', array(
                        '!project' => 'http://drupal.org/project/mongodb',
                        '!mongo' => 'http://www.mongodb.org/',
            ));
            break;
        case 'admin/settings/tow/mongodb/index':
            $remaining = 0;
            $total = 0;

            // Collect the stats
            $status = tow_mongodb_index_status();
            $remaining += $status['remaining'];
            $total += $status['total'];

            return t('The search index is generated by !cron. %percentage of the site content has been sent to the server. There @items left to send.', array(
                '!cron' => l(t('running cron'), 'admin/reports/status/run-cron', array('query' => array('destination' => 'admin/settings/tow/mongodb/index'))),
                '%percentage' => ((int) min(100, 100 * ($total - $remaining) / max(1, $total))) . '%',
                '@items' => format_plural($remaining, t('is 1 item'), t('are @count items')
            )));
            break;
    }
}

/**
 * Implementation of hook_js_alter().
 * 
 * @param array $javascript
 *  An array structured the same way as what would be returned by calling drupal_add_js(NULL, NULL, $scope).
 *  Altering this array will result in different javascript being sent to the page.
 * @param string $scope
 *  The scope, either 'header' or 'footer'.
 * @param string $query_string
 *  The string that will be appended to each javascript file's url.
 *  Drupal uses this to force browsers to get a new file when it's available rather than erroneously relying on what's in the browser cache.
 *  The hook_js_alter function can modify this string.
 */
function tow_mongodb_js_alter(&$javascript, $scope, &$query_string) {

    // Apply javascript change to Inner Search page only.
    if ((arg(0) == 'search_dataset') && !arg(2)) {

        // Header.
        if ($scope == 'header') {
            foreach (array('core', 'inline', 'module', 'setting', 'theme') as $area) {
                switch ($area) {
                    case 'core':
                        $jquery = array(jquery_update_jquery_path() => $javascript[$area]['misc/jquery.js']);
                        $javascript['core'] = array_merge($jquery, $javascript[$area]);
                        unset($javascript['core']['misc/jquery.js']);
                        break;
                    case 'inline':
                        break;
                    case 'module':
                        unset($javascript[$area]['sites/all/modules/admin_menu/admin_menu.js']);
                        unset($javascript[$area]['sites/all/libraries/jquery.ui/ui/minified/ui.core.min.js']);
                        unset($javascript[$area]['sites/all/libraries/jquery.ui/ui/minified/ui.dialog.min.js']);
                        unset($javascript[$area]['sites/all/libraries/jquery.ui/ui/minified/ui.draggable.min.js']);
                        unset($javascript[$area]['sites/all/modules/modalframe/js/parent.js']);
                        unset($javascript[$area]['sites/all/modules/automodal/automodal.js']);
                        unset($javascript[$area]['sites/all/modules/jstools/jstools.js']);
                        unset($javascript[$area]['sites/all/modules/collapsiblock/collapsiblock.js']);
                        unset($javascript[$area]['sites/all/modules/jstools/jquery.cookie.js']);
                        unset($javascript[$area]['sites/all/modules/feedback/feedback.js']);
                        unset($javascript[$area]['sites/all/modules/google_analytics/googleanalytics.js']);
                        unset($javascript[$area]['sites/all/modules/heartbeat/heartbeat.js']);
                        unset($javascript[$area]['sites/all/modules/datatables/dataTables/media/js/jquery.dataTables.js']);
                        unset($javascript[$area]['sites/all/modules/_custom/tow/js/jquery.ba-hashchange.min.js']);
                        unset($javascript[$area]['misc/collapse.js']);
                        unset($javascript[$area]['misc/autocomplete.js']);
                        unset($javascript[$area]['sites/all/modules/ctools/js/ajax-responder.js']);
                        unset($javascript[$area]['sites/all/modules/flag/theme/flag.js']);
                        unset($javascript[$area]['sites/all/modules/_custom/tow/js/inner_search.js']);
                        unset($javascript[$area]['sites/all/modules/_custom/tow/js/highcharts.js']);
                        unset($javascript[$area]['sites/all/modules/_custom/tow/js/itpoverlay/itpoverlay.js']);
                        unset($javascript[$area]['sites/all/modules/datatables/dataTables/extras/Scroller/media/js/dataTables.scroller.js']);
                        unset($javascript[$area]['sites/all/modules/datatables/dataTables/extras/ColVis/media/js/ColVis.js']);
                        unset($javascript[$area]['misc/textarea.js']);
                        break;
                    case 'setting':
                        foreach ($javascript[$area] as $index => $scripts) {
                            foreach ($scripts as $name => $settings) {
                                if (!in_array($name, array('tow_mongodb', 'basePath'))) {
                                    unset($javascript[$area][$index][$name]);
                                }
                            }
                            if (empty($javascript[$area][$index])) {
                                unset($javascript[$area][$index]);
                            }
                        }
                        break;
                    case 'theme':
                        unset($javascript[$area]['sites/all/themes/fusion/fusion_core/js/jquery.bgiframe.min.js']);
                        unset($javascript[$area]['sites/all/themes/fusion/fusion_core/js/hoverIntent.js']);
                        unset($javascript[$area]['sites/all/themes/fusion/fusion_core/js/supposition.js']);
                        unset($javascript[$area]['sites/all/themes/fusion/fusion_core/js/supersubs.js']);
                        unset($javascript[$area]['sites/all/themes/fusion/fusion_core/js/superfish.js']);
                        unset($javascript[$area]['sites/all/themes/fusion/fusion_core/js/script.js']);
                        unset($javascript[$area]['sites/all/themes/fusion/fusion_theory/js/noty/jquery.noty.js']);
                        unset($javascript[$area]['sites/all/themes/fusion/fusion_theory/js/noty/noty.js']);
                        unset($javascript[$area]['sites/all/themes/fusion/fusion_theory/js/noty/default.js']);
                        unset($javascript[$area]['sites/all/themes/fusion/fusion_theory/js/noty/topRight.js']);
                        unset($javascript[$area]['sites/all/themes/fusion/fusion_theory/js/noty/top.js']);
                        unset($javascript[$area]['sites/all/themes/fusion/fusion_theory/js/noty/topCenter.js']);
                        unset($javascript[$area]['sites/all/themes/fusion/fusion_theory/js/bootstrap/bootstrap.min.js']);
                        unset($javascript[$area]['sites/all/themes/fusion/fusion_theory/js/scroller/jquery.jscrollpane.js']);
                        unset($javascript[$area]['sites/all/themes/fusion/fusion_theory/js/scroller/jquery.mousewheel.min.js']);
                        break;
                }
            }
        }

        // Footer.
        if ($scope == 'footer') {
            foreach (array('core', 'inline', 'module', 'setting', 'theme') as $area) {
                switch ($area) {
                    case 'core':
                        break;
                    case 'inline':
                        $javascript[$area] = array();
                        break;
                    case 'module':
                        unset($javascript[$area]['sites/all/modules/_custom/tow/js/lou-multi-select/js/jquery.multi-select.js']);
                        unset($javascript[$area]['sites/all/modules/_custom/tow/js/quicksearch/jquery.quicksearch.js']);
                        break;
                    case 'setting':
                        break;
                    case 'theme':
                        break;
                }
            }
        }
    }
}

/**
 * Implementation of hook_menu().
 */
function tow_mongodb_menu() {

    $items = array();

    // MongoDB settings.
    $items['admin/settings/tow/mongodb'] = array(
        'tab_parent' => 'admin/settings/tow',
        'access arguments' => array('administer site configuration'),
        'title' => 'MongoDB',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('tow_mongodb_admin_settings_form'),
        'file' => 'includes/tow_mongodb.admin.inc',
        'type' => MENU_LOCAL_TASK,
    );
    $items['admin/settings/tow/mongodb/settings'] = array(
        'tab_parent' => 'admin/settings/tow/mongodb',
        'access arguments' => array('administer site configuration'),
        'title' => 'Settings',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('tow_mongodb_admin_settings_form'),
        'file' => 'includes/tow_mongodb.admin.inc',
        'type' => MENU_DEFAULT_LOCAL_TASK,
    );
    $items['admin/settings/tow/mongodb/index'] = array(
        'tab_parent' => 'admin/settings/tow/mongodb',
        'title' => 'Index',
        'page callback' => 'tow_mongodb_admin_index_page',
        'access arguments' => array('administer search'),
        'file' => 'includes/tow_mongodb.admin.inc',
        'type' => MENU_LOCAL_TASK,
    );
    $items['admin/settings/tow/mongodb/index/delete/confirm'] = array(
        'title' => 'Confirm index deletion',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('tow_mongodb_admin_delete_index_confirm'),
        'access arguments' => array('administer search'),
        'file' => 'includes/tow_mongodb.admin.inc',
        'type' => MENU_CALLBACK,
    );

    // Node.js settings.
    $items['admin/settings/tow/nodejs'] = array(
        'tab_parent' => 'admin/settings/tow',
        'access arguments' => array('administer site configuration'),
        'title' => 'Node.js',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('tow_nodejs_admin_settings_form'),
        'file' => 'includes/tow_mongodb.admin.inc',
        'type' => MENU_LOCAL_TASK,
    );
    $items['admin/settings/tow/nodejs/settings'] = array(
        'tab_parent' => 'admin/settings/tow/nodejs',
        'access arguments' => array('administer site configuration'),
        'title' => 'Settings',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('tow_nodejs_admin_settings_form'),
        'file' => 'includes/tow_mongodb.admin.inc',
        'type' => MENU_DEFAULT_LOCAL_TASK,
    );

    return $items;
}

/**
 * Implementation of hook_nodeapi().
 */
function tow_mongodb_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
    switch ($op) {
        case 'delete':

            _tow_mongodb_nodeapi_delete($node);
            break;

        case 'insert':

            // Make sure no node ends up with a timestamp that's in the future
            // by using time() rather than the node's changed or created timestamp.
            db_query("INSERT INTO {tow_mongodb_index} (nid, status, changed) VALUES  (%d, %d, %d)", $node->nid, $node->status, time());
            break;

        case 'update':

            _tow_mongodb_nodeapi_update($node);
            break;
    }
}

/**
 * Implementation of hook_user().
 *
 * Mark nodes as needing re-indexing if the author name changes.
 */
function tow_mongodb_user($op, &$edit, &$account) {
    switch ($op) {
        case 'update':
            if (isset($edit['name']) && $account->name != $edit['name']) {
                switch ($GLOBALS['db_type']) {
                    case 'mysql':
                    case 'mysqli':
                        db_query("UPDATE {tow_mongodb_index} asn INNER JOIN {node} n ON asn.nid = n.nid SET asn.changed = %d WHERE n.uid = %d", time(), $account->uid);
                        break;
                    default:
                        db_query("UPDATE {tow_mongodb_index} SET changed = %d WHERE nid IN (SELECT nid FROM {node} WHERE uid = %d)", time(), $account->uid);
                        break;
                }
            }
            break;
    }
}

/**
 * Implementation of hook_taxonomy().
 * 
 * Mark nodes as needing re-indexing if a term name changes.
 * 
 * @param string $op
 *  What is being done to $array. Possible values:
 *    - "delete";
 *    - "insert";
 *    - "update".
 * @param string $type
 *  What manner of item $array is. Possible values:
 *    - "term";
 *    - "vocabulary".
 * @param array $edit
 *  The item on which $op is being performed. Possible values:
 *    - for vocabularies, 'insert' and 'update' ops: $form_values from taxonomy_form_vocabulary_submit();
 *    - for vocabularies, 'delete' op: $vocabulary from taxonomy_get_vocabulary() cast to an array;
 *    - for terms, 'insert' and 'update' ops: $form_values from taxonomy_form_term_submit();
 *    - for terms, 'delete' op: $term from taxonomy_get_term() cast to an array.
 */
function tow_mongodb_taxonomy($op, $type, $edit) {
    if ($type == 'term' && ($op == 'update')) {
        switch ($GLOBALS['db_type']) {
            case 'mysql':
            case 'mysqli':
                db_query("UPDATE {tow_mongodb_index} asn INNER JOIN {term_node} tn ON asn.nid = tn.nid SET asn.changed = %d WHERE tn.tid = %d", time(), $edit['tid']);
                break;
            default:
                db_query("UPDATE {tow_mongodb_index} SET changed = %d WHERE nid IN (SELECT nid FROM {term_node} WHERE tid = %d)", time(), $edit['tid']);
                break;
        }
    }
}

/**
 * Implementation of hook_comment().
 *
 * Mark nodes as needing re-indexing if comments are added or changed.
 * 
 * @param array|object $a1
 *  Argument; meaning is dependent on the action being performed.
 *  For "validate", "update", and "insert": an array of form values submitted by the user.
 *  For all other operations, the comment the action is being performed on.
 * @param string $op
 *  The action being performed. Possible values:
 *    - "insert": The comment is being inserted.
 *    - "update": The comment is being updated.
 *    - "view": The comment is being viewed. This hook can be used to add additional data to the comment before theming.
 *    - "validate": The user has just finished editing the comment and is trying to preview or submit it. This hook can be used to check the comment. Errors should be set with form_set_error().
 *    - "publish": The comment is being published by the moderator.
 *    - "unpublish": The comment is being unpublished by the moderator.
 *    - "delete": The comment is being deleted by the moderator.
 */
function tow_mongodb_comment($a1, $op) {
    $edit = (array) $a1;
    switch ($op) {

        // Reindex the node when comments are added or changed.
        case 'insert':
        case 'update':
        case 'delete':
        case 'publish':
        case 'unpublish':

            tow_mongodb_index_mark_node($edit['nid']);
            break;
    }
}

/**
 * Implementation of hook_node_type().
 *
 * Mark nodes as needing re-indexing if a node type name changes.
 */
function tow_mongodb_node_type($op, $info) {
    if ($op != 'delete' && !empty($info->old_type) && $info->old_type != $info->type) {

        // We cannot be sure we are going before or after node module.
        switch ($GLOBALS['db_type']) {
            case 'mysql':
            case 'mysqli':
                db_query("UPDATE {tow_mongodb_index} asn INNER JOIN {node} n ON asn.nid = n.nid SET asn.changed = %d WHERE (n.type = '%s' OR n.type = '%s')", time(), $info->old_type, $info->type);
                break;
            default:
                db_query("UPDATE {tow_mongodb_index} SET changed = %d WHERE nid IN (SELECT nid FROM {node} WHERE type = '%s' OR type = '%s')", time(), $info->old_type, $info->type);
                break;
        }
    }
}

/**
 * Implementation of hook_cron().
 */
function tow_mongodb_cron() {

    // Mass update and delete functions are in the include file.
    tow_mongodb_index_check_node_table();
}

function tow_mongodb_get_mongo() {
    $options = array();
    $username = variable_get('tow_mongodb_user', '');
    $password = variable_get('tow_mongodb_password', '');
    $database = variable_get('tow_mongodb_db', 'admin');
    if ($username != '') {
        $options['username'] = $username;
    }
    if ($password != '') {
        $options['password'] = $password;
    }
    $options['db'] = $database;

    $mongo = new Mongo(variable_get('tow_mongodb_connection_url', 'mongodb://localhost:27017'), $options);
    $mongo = $mongo->selectDB($database);

    return $mongo;
}

/**
 * Helper function for hook_nodeapi().
 */
function _tow_mongodb_nodeapi_delete($node, $set_message = TRUE) {
    if (tow_mongodb_index_delete_node_from_index($node)) {

        // There was no exception, so delete from the table.
        db_query("DELETE FROM {tow_mongodb_index} WHERE nid = %d", $node->nid);
    }
}

/**
 * Helper function for hook_nodeapi().
 */
function _tow_mongodb_nodeapi_update($node, $set_message = TRUE) {

    // Check if the node has gone from published to unpublished.
    if (!$node->status && db_result(db_query("SELECT status FROM {tow_mongodb_index} WHERE nid = %d", $node->nid))) {
        if (tow_mongodb_index_delete_node_from_index($node)) {

            // There was no exception, so update the table.
            db_query('UPDATE {tow_mongodb_index} SET changed = %d, status = %d WHERE nid = %d', time(), $node->status, $node->nid);
        }
    } else {
        db_query('UPDATE {tow_mongodb_index} SET changed = %d, status = %d WHERE nid = %d', time(), $node->status, $node->nid);
    }
}

/**
 * Implementation of hook_update_index().
 */
function tow_mongodb_update_index() {
    $cron_limit = variable_get('tow_mongodb_cron_limit', 100);
    $rows = tow_mongodb_index_get_nodes_to_index($cron_limit);
    tow_mongodb_index_nodes($rows);
}

/**
 * Implementation of hook_theme_registry_alter().
 *
 * Make JS Alter's page preprocess function run *after* everything else's,
 * so that a theme can't call drupal_get_js() and mess everything up.
 */
function jsalter_theme_registry_alter(&$theme_registry) {
    if (isset($theme_registry['page'])) {
        if (count($theme_registry['page']['preprocess functions']) > 0) {
            // If jquery_update's preprocess function is there already, remove it.
            if ($key = array_search('jsalter_preprocess_page', $theme_registry['page']['preprocess functions'])) {
                unset($theme_registry['page']['preprocess functions'][$key]);
            }
        }
        // Now tack it on at the end so it runs after everything else.
        $theme_registry['page']['preprocess functions'][] = 'jsalter_preprocess_page';
    }
}