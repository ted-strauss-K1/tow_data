<?php
// $Id: tow.module,v 1.0.0.0 2011/02/28 23:42:15 tow Exp $
/**
 * @file
 * Custom code for tow.
 */

$module_path = drupal_get_path('module', 'tow');
include_once('./' . $module_path . '/tow_table_filter.inc');
include_once('./' . $module_path . '/tow_table_sql.inc');
include_once('./' . $module_path . '/tow_table.inc');
include_once('./' . $module_path . '/tow_record.inc');
include_once('./' . $module_path . '/tow_dataset.inc');
include_once('./' . $module_path . '/tow_table_theme.inc');
include_once('./' . $module_path . '/tow_validate.inc');
include_once('./' . $module_path . '/tow_pma_menu.inc');
include_once('./' . $module_path . '/tow_access.inc');
include_once('./' . $module_path . '/tow_statistics.inc');
include_once('./' . $module_path . '/tow_field.inc');
include_once('./' . $module_path . '/tow_invite.inc');
include_once('./' . $module_path . '/tow_register.inc');
include_once('./' . $module_path . '/tow_import.inc');

include_once('./' . $module_path . '/tests/tow_tests.inc');

// Validation constants, min and max number of columns in a table 
define("MIN_FIELDS_IN_TABLE", 1);
define("MAX_FIELDS_IN_TABLE", 20);

/**
 * Declare array of fields that may be used.
 */
function tow_possible_fields() {
  return array('int', 'char', 'float', 'bool', 'text', 'enum', 'date', 'datetime', 'time', 'timestamp', 'code');
}

/**
 * Implementation of hook_views_api().
 */
function tow_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'tow'),
  );
}

/**
 * Implementation of hook_theme()
 */
function tow_theme() {
  return array(
    'tabular_form' => array(
      'arguments' => array(
        'form' => NULL,
      ),
    ),
    'sortable_table' =>array(
      'arguments' => array(
        'header' => array(),
        'rows' => array(),
        'nid' => NULL,
        'uid' => NULL,
        'attributes' => array(),
        'caption' => NULL
      ),
    ),
    'tow_theme_dataset_badge' => array(
      'arguments' => array(
        'posted_by' => NULL,
        'count' => NULL,
        'searches' => NULL,
        'added' => NULL,
        'updated' => NULL,
        'access' => NULL,
      ),
      'template' => 'templates/tow_block-dataset_badge',
    ),
    'tow_theme_dataset_attachment' => array(
      'arguments' => array(
        'description' => NULL,
        'edit_description' => NULL,
        'categories' => NULL,
        'edit_categories' => NULL,
      ),
      'template' => 'templates/tow_theme_dataset_attachment',
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function tow_menu() {
  $items = array();
  
  $items['data'] = array(
    'access arguments' => array('access content'),
    'title' => 'Data',
    'page callback' => 'tow_data',
    'menu_name' => 'primary-links',
  );
  
  $items['table'] = array(
    'access arguments' => array('access content'),
    'page arguments' => array(1),
    'page callback' => 'tow_table_callback',
    'file' => 'tow_table.inc',
  );
  
  $items['table/%/truncate'] = array(
    'title' => 'Truncate',  
    'access arguments' => array('delete own record content'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tow_table_truncate_confirm', 1),
    'file' => 'tow_table_truncate.inc',
    'type' => MENU_CALLBACK
  );
  $items['field'] = array(
    'title' => 'Field Description',  
    'access arguments' => array('access content'),
    'page callback' => 'tow_field_description_callback',
    'page arguments' => array(2),
    'file' => 'tow_field.inc',
    'type' => MENU_CALLBACK
  );
  $items['dataset/%/maintenance'] = array(
    'title' => 'Maintenance mode',
    'access arguments' => array('edit own dataset content'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tow_dataset_maintenance_confirm', 1),
    'file' => 'tow_dataset.inc',
    'type' => MENU_CALLBACK
  );
  
  $items['access'] = array(
    'title' => NULL,
    'access arguments' => array('edit own dataset content'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tow_access_confirm', 1, 2, 3),
    'file' => 'tow_access.inc',
    'type' => MENU_CALLBACK
  );
  
  $items['field_delete'] = array(
    'title' => NULL,
    'access arguments' => array('edit own table content'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tow_field_delete_confirm', 1, 2, 3, 4),
    'file' => 'tow_field.inc',
    'type' => MENU_CALLBACK
  );
  
  $items['field_edit'] = array(
    'title' => NULL,
    'access arguments' => array('edit own table content'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tow_field_edit_form', 1, 2, 3, 4),
    'file' => 'tow_field.inc',
    'type' => MENU_CALLBACK
  );
  
  $items['invite'] = array(
    'title' => NULL,
    'access arguments' => array('edit own dataset content'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tow_invite_form', 1),
    'file' => 'tow_invite.inc',
    'type' => MENU_CALLBACK
  );
  
  // Callback for AHAH add more buttons.
  $items['add-more-feeds/js'] = array(
    'page callback' => 'tow_register_add_more_js',
    'access arguments' => array('access content'),
    'file' => 'tow_register.inc',
    'type' => MENU_CALLBACK,
  );
  
  $items['import/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tow_import_form', 1),
    'access arguments' => array('edit own dataset content'),
    'file' => 'tow_import.inc',
    'type' => MENU_CALLBACK,
  );
  $items['import_progress_get'] = array(
    'page callback' => 'tow_import_progress_get',
    'page arguments' => array(1, 2),
    'access arguments' => array('edit own dataset content'),
    'file' => 'tow_import.inc',
    'type' => MENU_CALLBACK,
  );
  
  $items['import/upload_dragged'] = array(
    'page callback' => 'tow_import_dragged',
    'access arguments' => array('edit own dataset content'),
    'file' => 'tow_import.inc',
    'type' => MENU_CALLBACK,
  );
  
  $items['import/upload_selected'] = array(
    'page callback' => 'tow_import_selected',
    'page arguments' => array(2, 3, 4),
    'access arguments' => array('edit own dataset content'),
    'file' => 'tow_import.inc',
    'type' => MENU_CALLBACK,
  );
  
  $items['import_grab'] = array(
    'page callback' => 'tow_import_grab',
    'page arguments' => array(1, 2, 3, 4),
    'access arguments' => array('edit own dataset content'),
    'file' => 'tow_import.inc',
    'type' => MENU_CALLBACK,
  );
  
  $items = array_merge($items, tow_tests_menu());
  return $items;
}

function tow_data() {
  return l('Create a new dataset', 'node/add/dataset', array('attributes' => array('class' => 'create-dataset-link')));
}

/**
 * Implementation of hook_nodeapi().
 */
function tow_nodeapi(&$node, $op) {
  // Delete all records that have ref to the table being deleted
  // Delete all tables that have ref to the dataset being deleted
  if ($op == 'delete') {    
    $children_type = _tow_children_type($node->type);
    if ($children_type) {
      $res = db_query("SELECT nid FROM {content_type_%s} WHERE field_{%s}_value = %d", $children_type, $node->type, $node->nid);
      while($node_to_delete = db_fetch_object($res))
        node_delete($node_to_delete->nid);
    }
  }

  if ($op == 'view') {
    if ($node->type == 'dataset') {
      global $dataset;
      $dataset = $node;
    }
  }
 
  if ($node->type == 'dataset' && $op == 'view') {
	tow_statistics_dataset_extract($node->nid);
    tow_dataset_summary($node);
    tow_statistics_dataset_update($node);
  }
  
  // Add table structure to table node
  if ($node->type == 'table' && $op == 'view') {
    tow_statistics_table_extract($node->nid);
    tow_table_structure($node);
    tow_statistics_table_update($node);
  }
  
  // Redirect from node/[record-nid] to node/[record-nid]/edit
  if  ($node->type == 'record' && $op == 'view')
    drupal_goto('node/' . $node->nid . '/edit', NULL, NULL, 301);

  if ($op == 'load' && $node->type == 'dataset')
    tow_access_dataset($node);

  // Submit description after table node was inserted
  if ($node->type == 'table' && $op == 'insert')
    tow_field_descriptions_submit($node->nid);
}

/**
 * Implementation of hook_user().
 */
function tow_user($op, &$edit, &$account) {
  
  if ($op == 'register') {
    tow_invite_register();
  }
  if ($op == 'insert') {
    tow_invite_insert($account);
    tow_register($edit, $account);
  }
}

/**
 * Implementation of hook_block().
 */
function tow_block($op = 'list', $delta = 0) {
  if ($op == 'list') {
    $blocks['create_table']['info'] = t('Create table');
    $blocks['pma_menu']['info'] = t('PhpMyAdmin menu');
    $blocks['dataset_badge']['info'] = t('Dataset badge');
    $blocks['dataset_stats']['info'] = t('Dataset statistics');
    return $blocks;
  }
  elseif($op == 'view') {
    if (user_access('access content')) {
      if($delta == 'create_table') { 
	    return tow_dataset_create_table_block();
      }
      if ($delta == 'pma_menu') {
	    return tow_pma_menu_block();
      }
      if ($delta == 'dataset_badge') {
	    return tow_dataset_badge_block();
      }
      if ($delta == 'dataset_stats') {
	    return tow_dataset_stats_block();
      }
    }
  }
  
}

/**
 * Implementation of hook_form_alter().
 */
function tow_form_alter(&$form, &$form_state, $form_id) {  
    
  if ($form_id == 'dataset_node_form' || $form_id == 'table_node_form') {
    $form['#submit'][] = 'tow_submit_maintanance_mode';
  }
  
  switch ($form_id) {
    case 'dataset_node_form':
      tow_dataset_form_alter(&$form, &$form_state);
      break;
    case 'table_node_form':
      tow_table_form_alter(&$form, &$form_state);
      break;
    case 'record_node_form':
      tow_record_form_alter(&$form, &$form_state);
      break;
    case 'user_register':
      tow_register_form_alter($form, $form_state);
      break;
  }
  
  if ($form_id == 'node_delete_confirm' || $form_id == 'tow_table_truncate_confirm') {
    $node = node_load($form['nid']['#value']);
    switch ($node->type) {
      case 'dataset':
        global $dataset;
        $dataset = (object)(array('nid' => $node->nid, 'title' => $node->title));
        break;
      case 'table':
        global $dataset;
        global $table;
        $dataset = node_load($node->field_dataset['0']['value']);
        $dataset = (object)array('nid' => $dataset->nid, 'title' => $dataset->title);
        $table = (object)array('nid' => $node->nid, 'title' => $node->title);
        break;
      case 'record':
        global $dataset;
        global $table;
        $table = node_load($node->field_table['0']['value']);
        $dataset = node_load($table->field_dataset['0']['value']);
        $dataset = (object)array('nid' => $dataset->nid, 'title' => $dataset->title);
        $table = (object)array('nid' => $table->nid, 'title' => $table->title);
        break;
    }
  
  }
  
  // add cancel button to record, table and dataset node editing and user register forms.
  if ($form_id == 'record_node_form' || $form_id == 'table_node_form' || $form_id == 'dataset_node_form' || $form_id == 'user_register')
  $form['buttons']['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#weight' => 20
  );
  
}

/**
 * Submit callback for table and dataset editing form
 * Checks whether status of node is changed. If it is changed call tow_maintanance_mode function
 */
function tow_submit_maintanance_mode($form, &$form_state) {
  if ($form['options']['status']['#default_value'] != $form_state['values']['status'])
    tow_maintanance_mode($form_state['values']['status'], $form_state['values']['nid'], $form_state['values']['type']);
}

/**
 * When table is published/unpublished, perform the same change of status for records connected
 * When dataset is published/unpublished, perform the same change of status for tables connected and recursively call this function for each table
 */
function tow_maintanance_mode($status, $nid, $type) {
  
  if ($status == 1)
    $function = 'node_publish_action'; //TODO: do we really need to call them? (do we need watchdog be affected?)
  elseif ($status == 0)
    $function = 'node_unpublish_action';
  
  $children_type = _tow_children_type($type);
  $res = db_query("SELECT nid FROM {content_type_%s} WHERE field_{%s}_nid = %d", $children_type, $type, $nid);
  
  if ($type == 'dataset')
    while($node = db_fetch_object($res)) {
      $node = node_load($node->nid);
      $function($node);
      node_save($node);
      tow_maintanance_mode($status, $node->nid, 'table');
    }
  elseif ($type == 'table')
    while($node = db_fetch_object($res)) {
      $node = node_load($node->nid);
      $function($node);
      node_save($node);
    }
}

/**
 * @return "record" for "table" and "table" for "dataset"
 * @param unknown_type $type
 */
function _tow_children_type($type) {
  switch ($type) {
    case 'table':
      $children_type = 'record';
      break;
    case 'dataset':
      $children_type = 'table';
      break;
  }
  return $children_type;
}  

/**
 * For @param $value return boolean string
 */
function _tow_format_bool($value) {
  if ($value)
    return 'true';
  if ($value === '0')
    return 'false';
}

/**
 * For @param $value return 1 if it is "true" or 1. Not case-sensitive 
 */
function _tow_bool_to_int($value) {
  if (strtolower($value) == 'true')
    return 1;
  if ($value == 1)
    return 1;
  return 0;
}

/**
 * Extract and show names of tables from the dataset
 * @param $nid : dataset nid
 * @return array
 */
function tow_table_list($nid) {

  $tables_res = db_query("
    SELECT n.nid, n.title 
    FROM {content_type_table} t
    LEFT JOIN {node} n
      ON t.nid = n.nid
    WHERE t.field_dataset_value = %d
    ", $nid);
  
  $tables = array();
  
  while($table = db_fetch_array($tables_res))
    $tables[$table['nid']] = $table['title'];
  
  return $tables;
}